#### Overview

Shows one of the two PayPal payment window types. One type facilitates a single payment while the other lets the user consent to future payments.

## Syntax

`````
PayPal.show( windowType, options )
`````

##### windowType - (required)

__[String]__ The type of PayPal window to show, either `"payment"` or `"futurePayment"`. `"payment"` facilitates a single payment while `"futurePayment"` lets the user consent to future payments.

##### options - (required)

__[Table]__ Table containing key/value pairs depending on the window type — see the following sections for details.

## Parameters for Single Payment

For a single payment, valid parameters for the `options` table include:

##### payment - (required)

__[Table]__ A table of values used to set the PayPal payment details. Valid properties include:

*   `amount` required numerical value for the payment amount
*   `tax` optional numerical value for the amount of tax
*   `shipping` optional numerical value for the cost of shipping
*   `intent` optional string value for the intent of the payment, either `"sale"` or `"authorize"` (default is `"sale"`)

##### shortDescription - (required)

__[String]__ The description of the payment, for example `"Hipster t-shirt"`.

##### currencyCode - (optional)

__[String]__ The currency code of the payment. If this is omitted, PayPal will set it automatically depending on the user's country.

##### acceptCreditCards - (optional)

__[Boolean]__ This value determines whether or not your app allows credit card payments. This is initially set in `PayPal.config()`, but you can optionally update the property here. If set to `true`, your app will allow payment by credit card and allow users to pay by scanning their credit card with the device's camera. If set to `false`, your app will only allow payments via a registered PayPal account. Default is `true`.

##### bnCode - (optional)

__[String]__ Optional Build Notation code ("BN code") obtained from `partnerprogram@paypal.com` for your tracking purposes.

##### listener - (optional)

__[Listener]__ This function is executed if the user **completes** the payment or **cancels** the payment window. The `event` property will equate to the following properties:

*   `event.type` — `"confirmation"`

*   `event.name` — `"payment"`

*   `event.state` — `"completed"` for a completed payment or `"canceled"` for a canceled event

*   `event.response` — for a completed payment, the JSON-encoded response string from PayPal

*   `event.correlationID` — for a completed payment, the PayPal application correlation ID (generated by PayPal)

*   `event.amount` — for a completed payment, this is the payment amount

*   `event.shortDescription` — for a completed payment, the value passed to `shortDescription`

*   `event.currencyCode` — for a completed payment, the currency code of the payment

### Response Compatibility

To maintain compatibility with any future changes PayPal may make to their response data, we don't interpret this data in any way — we merely send it to the listener as a <nobr>JSON-encoded</nobr> string in its pure form. See the example below regarding which data is contained in the JSON response.

    -- Example single payment response (JSON Encoded)
    -- The PayPal response consists of two tables. The table is JSON-encoded so you'll need to use the Corona JSON library to decode.

    "response_type": "payment"

    -- First response table
    "response table": 
    {
        "paypal_sdk_version": 2.0.1
        "platform": "iOS"
        "product_name": "PayPal iOS SDK"
        "environment": "sandbox"
    }

    -- Second response
    "response table": 
    {
        "id": "PAY-8S598429NF105401WKM6CNKY"
        "create_time": "2014-04-02T15:03:07Z"
        "state": "approved"
        "intent": "sale"
    }

**Note:** PayPal provides advice on how to verify any payment you've received. You can find this information [](https://developer.paypal.com/webapps/developer/docs/integration/mobile/verify-mobile-payment)here.

## Parameters for Future Payment

For a future payment, the `options` table should include a listener function to respond to the payment results.

##### listener - (optional)

__[Listener]__ This function is executed if the user **completes** consent for future payments or **cancels** the future payment window. The `event` property will equate to the following properties:

*   `event.type` — `"confirmation"`

*   `event.name` — `"futurePayment"`

*   `event.state` — `"completed"` for completed consent or `"canceled"` for a canceled event

*   `event.response` — for a completed consent, the JSON-encoded response string from PayPal

*   `event.correlationID` — for a completed consent, the PayPal application correlation ID (generated by PayPal)

### Response Compatibility

To maintain compatibility with any future changes PayPal may make to their response data, we don't interpret this data in any way — we merely send it to the listener as a **JSON-encoded** string in its pure form. See the example below regarding which data is contained in the JSON response.

    -- Example future payment response (JSON-Encoded)

    -- The PayPal response consists of two tables. The table is JSON-encoded so you'll need to use the Corona JSON library to decode.
    -- Note that the 'code' variable is the PayPal authorization code from the user consenting to future payments.

    "response_type": "authorization_code"

    -- First response table
    "response table": 
    {
        "paypal_sdk_version": 2.0.1
        "platform": "iOS"
        "product_name": "PayPal iOS SDK"
        "environment": "sandbox"
    }

    -- Second response table
    "response table": 
    {
        "code": "EMIk4CyRA0-Yq-cgdj-ImKHybEYde401WS4fuxiynFnv31eGtXFyUqSRTlbdpuzBwR1759cqx7cYENGCh9gLiUjIHqMU1s96Bkw2ALVzjkEGApok"
    }

**Note:** PayPal provides guides on how to best handle future payments on the server side. You can find these guides [here](https://developer.paypal.com/webapps/developer/docs/integration/mobile/make-future-payment/#required-best-practices-for-future-payments) and [here](https://github.com/paypal/PayPal-iOS-SDK/blob/master/docs/future_payments_server.md#obtain-oauth2-tokens).

#### Examples


##### Single Payment

    local PayPal = require( "plugin.paypal" )
    local json = require( "json" )

    PayPal.show( "payment",
    {
        payment =
        {
            amount = 30.00,
            tax = 10.00,
            shipping = 10.00,
            intent = "sale",  --valid values are "sale" or "authorize"
        },
        --bnCode = "XX",
        currencyCode = "USD",
        shortDescription = "My purchase",
        listener = function( event )
            if ( event.response ) then
                local confirmation = json.decode( event.response )

                -- Loop through the JSON payment response and print out the data
                for k,v in pairs( confirmation ) do
                    if ( type( v ) == "table" ) then
                        print( "table: {" )
                        for k1,v1 in pairs( v ) do
                            print( k1, ":", v1 )
                        end
                        print( "}" )
                    else
                        print( k, ":", v )
                    end
                end
            else
                for k,v in pairs( event ) do
                    print( k, ":", v )
                end
            end
        end
    }

##### Future Payment

    local PayPal = require( "plugin.paypal" )
    local json = require( "json" )

    PayPal.show( "futurePayment",
    {
        listener = function( event )
            if ( event.response ) then
                local confirmation = json.decode( event.response )

                -- Loop through the JSON future payment response and print out the data
                for k,v in pairs( confirmation ) do
                    if ( type( v ) == "table" ) then
                        print( "table: {" )
                        for k1,v1 in pairs( v ) do
                            print( k1, ":", v1 )
                        end
                        print( "}" )
                    else
                        print( k, ":", v )
                    end
                end
            else
                for k,v in pairs( event ) do
                    print( k, ":", v )
                end
            end
        end
    }